// Generated by Dagger (https://dagger.dev).
package com.uni.unistudent.data.di;

import android.content.SharedPreferences;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.gson.Gson;
import com.uni.unistudent.data.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepoModule_ProvideAuthRepoFactory implements Factory<AuthRepository> {
  private final Provider<FirebaseFirestore> databaseProvider;

  private final Provider<FirebaseAuth> authProvider;

  private final Provider<SharedPreferences> appPreferencesProvider;

  private final Provider<Gson> gsonProvider;

  public RepoModule_ProvideAuthRepoFactory(Provider<FirebaseFirestore> databaseProvider,
      Provider<FirebaseAuth> authProvider, Provider<SharedPreferences> appPreferencesProvider,
      Provider<Gson> gsonProvider) {
    this.databaseProvider = databaseProvider;
    this.authProvider = authProvider;
    this.appPreferencesProvider = appPreferencesProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public AuthRepository get() {
    return provideAuthRepo(databaseProvider.get(), authProvider.get(), appPreferencesProvider.get(), gsonProvider.get());
  }

  public static RepoModule_ProvideAuthRepoFactory create(
      Provider<FirebaseFirestore> databaseProvider, Provider<FirebaseAuth> authProvider,
      Provider<SharedPreferences> appPreferencesProvider, Provider<Gson> gsonProvider) {
    return new RepoModule_ProvideAuthRepoFactory(databaseProvider, authProvider, appPreferencesProvider, gsonProvider);
  }

  public static AuthRepository provideAuthRepo(FirebaseFirestore database, FirebaseAuth auth,
      SharedPreferences appPreferences, Gson gson) {
    return Preconditions.checkNotNullFromProvides(RepoModule.INSTANCE.provideAuthRepo(database, auth, appPreferences, gson));
  }
}
